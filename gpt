#!/usr/bin/env python3

import argparse
import json
import logging
import os
import sys

import openai

openai.api_key = os.getenv("OPENAI_API_KEY")

LOG = logging.getLogger(__name__)

logging.basicConfig(
    stream=sys.stdout,
    level=logging.INFO,
    format="%(message)s",
)


STOP = "\n"
DEFAULT_MODEL = "text-davinci-003"
DEFAULT_TEMPERATURE = 0
DEFAULT_MAX_TOKENS = 64
DEFAULT_TOP_P = 1.0
DEFAULT_FREQUENCY_PENALTY = 0.0
DEFAULT_PRESENCE_PENALTY = 0.0


def request_completion(request) -> str:
    LOG.debug("request:")
    LOG.debug(f"json```\n{json.dumps(request, indent=1)}```")

    response = openai.Completion.create(**request)
    LOG.debug("response:")
    LOG.debug(f"json```\n{json.dumps(response, indent=1)}```")

    return response.choices[0].text


def main():
    parser = argparse.ArgumentParser(description="OpenAI GPT-3 text completion")
    parser.add_argument(
        "file",
        nargs="?",
        type=argparse.FileType("r"),
        default=sys.stdin,
        help="input file",
    )
    parser.add_argument("--debug", action="store_true", help="enable debug output")
    parser.add_argument(
        "--temperature",
        type=float,
        default=DEFAULT_TEMPERATURE,
        help=f"temperature (default: {DEFAULT_TEMPERATURE})",
    )
    parser.add_argument(
        "--max-tokens",
        type=int,
        default=DEFAULT_MAX_TOKENS,
        help=f"max tokens (default: {DEFAULT_MAX_TOKENS})",
    )
    parser.add_argument(
        "--top-p",
        type=float,
        default=DEFAULT_TOP_P,
        help=f"top p (default: {DEFAULT_TOP_P})",
    )
    parser.add_argument(
        "--frequency-penalty",
        type=float,
        default=DEFAULT_FREQUENCY_PENALTY,
        help=f"frequency penalty (default: {DEFAULT_FREQUENCY_PENALTY})",
    )
    parser.add_argument(
        "--presence-penalty",
        type=float,
        default=DEFAULT_PRESENCE_PENALTY,
        help=f"presence penalty (default: {DEFAULT_PRESENCE_PENALTY})",
    )
    parser.add_argument(
        "--model",
        default=DEFAULT_MODEL,
        help=f"model (default: {DEFAULT_MODEL})",
    )
    parser.add_argument(
        "--default",
        action="store_true",
        help="print default parameters",
    )
    parser.add_argument(
        "--silent",
        action="store_true",
        help="silent, no print of input",
    )

    args = parser.parse_args()

    if args.default:
        defaults = {
            "temperature": DEFAULT_TEMPERATURE,
            "max_tokens": DEFAULT_MAX_TOKENS,
            "top_p": DEFAULT_TOP_P,
            "frequency_penalty": DEFAULT_FREQUENCY_PENALTY,
            "presence_penalty": DEFAULT_PRESENCE_PENALTY,
            "model": DEFAULT_MODEL,
        }
        print(json.dumps(defaults, indent=2))
        return

    if args.debug:
        LOG.setLevel(logging.DEBUG)
        LOG.debug("Verbose output enabled")
        LOG.debug("argv: %s", sys.argv)

    input_text = args.file.read().strip()
    LOG.debug("input: %s", input_text)

    if not args.silent:
        print(input_text)

    request = dict(
        model=DEFAULT_MODEL,
        prompt=f"{input_text}{STOP}",
        temperature=args.temperature,
        max_tokens=args.max_tokens,
        top_p=args.top_p,
        frequency_penalty=args.frequency_penalty,
        presence_penalty=args.presence_penalty,
    )
    text = request_completion(request)
    print(text)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        LOG.debug("KeyboardInterrupt")
        sys.exit(1)
