#!/usr/bin/env python3

import argparse
import dataclasses
import datetime
import json
import logging
import sys
from typing import Optional

import openai

LOG = logging.getLogger(__name__)

DEFAULT_USER = "gpt-cli"
DEFAULT_CHAT_MODEL = "gpt-3.5-turbo"
DEFAULT_TEXT_MODEL = "text-davinci-003"


@dataclasses.dataclass
class CompletionResponse:
    @dataclasses.dataclass
    class Choices:
        text: str
        index: int
        logprobs: dict
        finish_reason: str

    @dataclasses.dataclass
    class Usage:
        prompt_tokens: int
        completion_tokens: int
        total_tokens: int

    id: str
    object: str
    created: datetime.datetime
    model: str
    choices: list[Choices]
    usage: Usage

    @classmethod
    def from_dict(cls, data: dict) -> "CompletionResponse":
        choices = [cls.Choices(**c) for c in data.get("choices", [])]
        usage = cls.Usage(**data.get("usage", {}))
        return cls(
            id=data.get("id", ""),
            object=data.get("object", ""),
            created=datetime.datetime.fromtimestamp(data.get("created", 0)),
            model=data.get("model", ""),
            choices=choices,
            usage=usage,
        )

    @property
    def text(self) -> str:
        return self.choices[0].text


@dataclasses.dataclass
class CompletionRequest:
    """
    A request to the OpenAI API to generate a completion.
    """

    model: str
    """
    The name of the OpenAI model to use for the request. This is a
    required parameter, and you'll need to choose the model that's best
    suited to your use case.

    text-davinci-003
        Most capable GPT-3 model. Can do any task the other models can do, often
        with higher quality, longer output and better instruction-following. Also
        supports inserting completions within text.

    code-davinci-002
        Most capable Codex model. Particularly good at translating natural
        language to code. In addition to completing code, also supports inserting
        completions within code.

    code-cushman-001
        Almost as capable as Davinci Codex, but slightly faster. This speed
        advantage may make it preferable for real-time applications.

    Full list: https://platform.openai.com/docs/api-reference/models/list
    """

    prompt: str
    """
    The prompt(s) to generate completions for, encoded as a string,
    array of strings, array of tokens, or array of token arrays.

    Note that <|endoftext|> is the document separator that the model
    sees during training, so if a prompt is not specified the model will
    generate as if from the beginning of a new document.
    """

    suffix: str | None = None
    """
    The suffix that comes after a completion of inserted text.
    """

    max_tokens: int = 16
    """
    The maximum number of tokens to generate in the completion.

    The token count of your prompt plus max_tokens cannot exceed the
    model's context length. Most models have a context length of 2048
    tokens (except for the newest models, which support 4096).

    https://platform.openai.com/tokenizer
    """

    temperature: float = 1
    """
    What sampling temperature to use, between 0 and 2. Higher values
    like 0.8 will make the output more random, while lower values like
    0.2 will make it more focused and deterministic.

    We generally recommend altering this or top_p but not both.
    """

    top_p: float = 1
    """
    An alternative to sampling with temperature, called nucleus sampling,
    where the model considers the results of the tokens with top_p
    probability mass. So 0.1 means only the tokens comprising the top 10%
    probability mass are considered.

    We generally recommend altering this or temperature but not both.
    """

    n: int = 1
    """
    How many completions to generate for each prompt.

    Note: Because this parameter generates many completions, it can
    quickly consume your token quota. Use carefully and ensure that you
    have reasonable settings for max_tokens and stop.
    """

    stream: bool = False
    """
    Whether to stream back partial progress. If set, tokens will be sent as
    data-only server-sent events as they become available, with the stream
    terminated by a data: [DONE] message.

    https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#event_stream_format
    """

    logprobs: int | None = None
    """
    Include the log probabilities on the logprobs most likely tokens,
    as well the chosen tokens. For example, if logprobs is 5, the API will
    return a list of the 5 most likely tokens. The API will always return the
    logprob of the sampled token, so there may be up to logprobs+1 elements
    in the response.

    The maximum value for logprobs is 5. If you need more than this, please
    contact us through our Help center and describe your use case.
    """

    echo: bool = False
    """
    Echo back the prompt in addition to the completion
    """

    stop: str | list[str] | None = None
    """
    Up to 4 sequences where the API will stop generating further tokens. The
    returned text will not contain the stop sequence.
    """

    presence_penalty: float = 0
    """
    Number between -2.0 and 2.0. Positive values penalize new tokens based on
    whether they appear in the text so far, increasing the model's likelihood
    to talk about new topics.

    https://platform.openai.com/docs/api-reference/parameter-details
    """

    frequency_penalty: float = 0
    """
    Number between -2.0 and 2.0. Positive values penalize new tokens based
    on their existing frequency in the text so far, decreasing the model's
    likelihood to repeat the same line verbatim.

    https://platform.openai.com/docs/api-reference/parameter-details
    """

    best_of: int = 1
    """
    Generates best_of completions server-side and returns the "best" (the one
    with the highest log probability per token). Results cannot be streamed.

    When used with n, best_of controls the number of candidate completions
    and n specifies how many to return â€“ best_of must be greater than n.

    Note: Because this parameter generates many completions, it can quickly
    consume your token quota. Use carefully and ensure that you have
    reasonable settings for max_tokens and stop.
    """

    def __str__(self) -> str:
        return json.dumps(dataclasses.asdict(self), indent=2)


@dataclasses.dataclass
class ChatMessage:
    """
    A chat message sent to or received from the OpenAI API.
    """

    role: str
    """
    The role of the message. Either "user" or "assistant".
    """

    content: str
    """
    The content of the message.
    """


@dataclasses.dataclass
class ChatCompletionRequest:
    """
    Creates a completion for the chat message
    """

    model: str
    """
    ID of the model to use. Currently, only gpt-3.5-turbo and gpt-3.5-turbo-0301 are supported.
    """

    messages: list[ChatMessage]
    """
    The messages to generate chat completions for, in the chat format.

    https://platform.openai.com/docs/guides/chat/introduction
    """

    temperature: Optional[float] = 1
    """
    What sampling temperature to use, between 0 and 2. Higher values
    like 0.8 will make the output more random, while lower values like
    0.2 will make it more focused and deterministic.

    We generally recommend altering this or top_p but not both.
    """

    top_p: Optional[float] = 1
    """
    An alternative to sampling with temperature, called nucleus sampling,
    where the model considers the results of the tokens with top_p
    probability mass. So 0.1 means only the tokens comprising the top 10%
    probability mass are considered.

    We generally recommend altering this or temperature but not both.
    """

    n: Optional[int] = 1
    """
    How many completions to generate for each prompt.

    Note: Because this parameter generates many completions, it can
    quickly consume your token quota. Use carefully and ensure that you
    have reasonable settings for max_tokens and stop.
    """

    stream: Optional[bool] = False
    """
    Whether to stream back partial progress. If set, tokens will be sent as
    data-only server-sent events as they become available, with the stream
    terminated by a data: [DONE] message.

    https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#event_stream_format
    """

    stop: Optional[str] | list[str] | None = None
    """
    Up to 4 sequences where the API will stop generating further tokens. The
    returned text will not contain the stop sequence.
    """

    max_tokens: Optional[int] = None
    """
    The maximum number of tokens to generate in the completion.

    The token count of your prompt plus max_tokens cannot exceed the
    model's context length. Most models have a context length of 2048
    tokens (except for the newest models, which support 4096).

    https://platform.openai.com/tokenizer
    """

    presence_penalty: Optional[float] = 0
    """
    Number between -2.0 and 2.0. Positive values penalize new tokens based on
    whether they appear in the text so far, increasing the model's likelihood
    to talk about new topics.

    https://platform.openai.com/docs/api-reference/parameter-details
    """

    frequency_penalty: Optional[float] = 0
    """
    Number between -2.0 and 2.0. Positive values penalize new tokens based
    on their existing frequency in the text so far, decreasing the model's
    likelihood to repeat the same line verbatim.

    https://platform.openai.com/docs/api-reference/parameter-details
    """

    logit_bias: Optional[dict] = dataclasses.field(default_factory=dict)
    """
    Modify the likelihood of specified tokens appearing in the completion.

    Accepts a json object that maps tokens (specified by their token
    ID in the tokenizer) to an associated bias value from -100 to
    100. Mathematically, the bias is added to the logits generated by
    the model prior to sampling. The exact effect will vary per model,
    but values between -1 and 1 should decrease or increase likelihood
    of selection; values like -100 or 100 should result in a ban or
    exclusive selection of the relevant token.
    """

    user: Optional[str] = DEFAULT_USER
    """
    A unique identifier representing your end-user, which can help OpenAI
    to monitor and detect abuse.

    https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids
    """

    def __str__(self) -> str:
        return json.dumps(dataclasses.asdict(self), indent=2)


@dataclasses.dataclass
class ChatCompletionResponse:
    """
    Response from the OpenAI API for a chat completion request.

    Example:
        {
         'id': 'chatcmpl-6p9XYPYSTTRi0xEviKjjilqrWU2Ve',
         'object': 'chat.completion',
         'created': 1677649420,
         'model': 'gpt-3.5-turbo',
         'usage': {'prompt_tokens': 56, 'completion_tokens': 31, 'total_tokens': 87},
         'choices': [
           {
            'message': {
              'role': 'assistant',
              'content': 'The 2020 World Series was played in Arlington, Texas at the Globe Life Field, which was the new home stadium for the Texas Rangers.'},
            'finish_reason': 'stop',
            'index': 0
           }
          ]
        }
    """

    @dataclasses.dataclass
    class Choices:
        message: ChatMessage
        index: int
        finish_reason: str

    @dataclasses.dataclass
    class Usage:
        prompt_tokens: int
        completion_tokens: int
        total_tokens: int

    id: str
    object: str
    created: datetime.datetime
    model: str
    choices: list[Choices]
    usage: Usage

    @classmethod
    def from_dict(cls, data: dict) -> "ChatCompletionResponse":
        choices = [
            cls.Choices(
                message=ChatMessage(
                    role=choice["message"]["role"], content=choice["message"]["content"]
                ),
                index=choice["index"],
                finish_reason=choice["finish_reason"],
            )
            for choice in data.get("choices", [])
        ]

        # ) for c in data.get("choices", [])]
        usage = cls.Usage(**data.get("usage", {}))
        return cls(
            id=data.get("id", ""),
            object=data.get("object", ""),
            created=datetime.datetime.fromtimestamp(data.get("created", 0)),
            model=data.get("model", ""),
            choices=choices,
            usage=usage,
        )

    @property
    def message(self) -> ChatMessage:
        return self.choices[0].message


class Completion:
    @classmethod
    def create(cls, request: CompletionRequest) -> CompletionResponse:
        """
        Create text completion.

        https://platform.openai.com/docs/guides/completion/
        """
        LOG.debug(f"{request=}")
        args = dataclasses.asdict(request)
        LOG.debug(f"{args=}")
        response = CompletionResponse.from_dict(openai.Completion.create(**args))
        LOG.debug(f"{response=}")
        return response


class ChatCompletion:
    @classmethod
    def create(cls, request: ChatCompletionRequest) -> ChatCompletionResponse:
        """
        Create a chat completion.

        https://platform.openai.com/docs/guides/chat
        """
        LOG.debug(f"{request=}")
        args = dataclasses.asdict(request)
        LOG.debug(f"{args=}")
        response = ChatCompletionResponse.from_dict(
            openai.ChatCompletion.create(**args)
        )
        LOG.debug(f"{response=}")
        return response


def main():
    parser = argparse.ArgumentParser(description="OpenAI GPT-3 text completion")
    parser.add_argument("--message", "-m", type=str, help="Send message")
    parser.add_argument(
        "--echo",
        "-e",
        action="store_true",
        default=False,
        help="Echo input message for stdin",
    )
    parser.add_argument(
        "--debug",
        action="store_true",
        default=False,
        help="enable debug output",
    )

    args = parser.parse_args()

    if args.debug:
        LOG.setLevel(logging.DEBUG)
        LOG.debug("Verbose output enabled")
        LOG.debug("argv: %s", sys.argv)

    if args.message:
        chat_completion = ChatCompletion.create(
            ChatCompletionRequest(
                model=DEFAULT_CHAT_MODEL,
                messages=[ChatMessage(role="user", content=args.message)],
            )
        )
        print(chat_completion.message.content)
        return

    if not sys.stdin.isatty():
        LOG.debug("Reading from stdin")
        text = sys.stdin.read()
        if args.echo:
            print(text, end="")
        chat_completion = ChatCompletion.create(
            ChatCompletionRequest(
                model=DEFAULT_CHAT_MODEL,
                messages=[ChatMessage(role="user", content=text)],
            )
        )
        print(chat_completion.message.content)
        return

    LOG.debug("No message provided, starting interactive mode")
    try:
        messages = []
        while True:
            prompt = input("> ")
            messages.append(ChatMessage(role="user", content=prompt))

            chat_completion = ChatCompletion.create(
                ChatCompletionRequest(
                    model=DEFAULT_CHAT_MODEL,
                    messages=messages,
                )
            )
            messages.append(chat_completion.message)

            print(messages[-1].content)

    except EOFError:
        LOG.debug("EOF")
        return


if __name__ == "__main__":
    try:
        logging.basicConfig(
            stream=sys.stdout,
            level=logging.INFO,
            format="%(message)s",
        )
        main()
    except KeyboardInterrupt:
        LOG.debug("KeyboardInterrupt")
        sys.exit(1)
    except openai.OpenAIError as e:
        LOG.error("OpenAIError: %s", e)
